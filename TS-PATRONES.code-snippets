{
  "Patrón Singleton": {
    "scope": "typescript",
    "prefix": "eze-single",
    "description": "Hacer un Singleton así bien rápidito",
    "body": [
      "class ${1:nombreDeLaInstancia} {",
      "private static instancia: $1;",
      "",
      " private constructor() {}",
      "",
      "public static obtenerInstancia(): $1 {",
      "if (!$1.instancia) {",
      "$1.instancia = new $1();",
      "}",
      "return $1.instancia;",
      "}",
      "}"
    ]
  },
  "Patrón Factory": {
    "scope": "typescript",
    "prefix": "eze-factory",
    "description": "Hacer un Factory así bien rápidito.",
    "body": [
      "class $1 {",
      "  private propiedad: any;",
      "",
      "  constructor(propiedad: any) {",
      "    this.propiedad = propiedad;",
      "  }",
      "}",
      "",
      "class $2 {",
      "  private propiedad: any;",
      "",
      "  constructor(propiedad: any) {",
      "    this.propiedad = propiedad;",
      "  }",
      "}",
      "",
      "class Factory {",
      "  public crearCoso(tipo: string, propiedad: any): any {",
      "if (tipo === '$1') {",
      "  return new $1(propiedad);",
      "} else if (tipo === '$2') {",
      "  return new $2(propiedad);",
      "}",
      "throw new Error('Tipo no reconocido');",
      "}",
      "}$0"
    ]
  },
  "Patrón Observer": {
    "scope": "typescript",
    "prefix": "eze-observer",
    "body": [
      "class Observador {",
      "  constructor(private nombre: string) {}",
      "  avisar(parametro: any): void {",
      "console.log(`${this.nombre} ha sido avisado: `,parametro);",
      "}",
      "}",
      "",
      "class ${1:AdministradorDeObservadores} {",
      "private observadores: Observador[] = [];",
      "public estado: boolean = true;",
      "",
      "agregarObservador(observador: Observador): void {",
      "this.observadores.push(observador);",
      "}",
      "",
      "  eliminarObservador(observador: Observador): void {",
      "this.observadores = this.observadores.filter((obs) => obs !== observador);",
      "}",
      "",
      "// En esta función es que se activa el mensajeo a los observadores",
      "cambiarEstado(nuevoEstado: boolean): void {",
      "this.estado = nuevoEstado;",
      "this.notificarObservadores();",
      "}",
      "",
      "private notificarObservadores(): void {",
      "this.observadores.forEach((obs) => obs.avisar('hola'));",
      " }",
      "}"
    ],
    "description": "Hacer un Observer así bien rápidito"
  },
  "Patrón Adapter":{
	"prefix": "eze-adapter",
	"description": "Hacer un adapter así bien rápidito.",
	"scope": "typescript",
	"body": [
		"interface Procesador {",
  "funcionNueva(parametro: any): void;",
"}",
"",
"class ${1:claseVieja} {",
"  public funcionVieja(parametro: any): void {",
"    // -- Función cualquiera --",
"  }",
"}",
"",
"class ${2:claseNueva} implements Procesador {",
"  public funcionNueva(parametro: any): void {",
"    // -- Función cualquiera --",
"  }",
"}",
"",
"// La clase nueva y el Adaptador utilizan la misma interface", 
"class Adaptador implements Procesador {",
  "private gateway: $1;",
  "",
  "constructor(gateway: $1) {",
    "this.gateway = gateway;",
  "}",
"",
  "public funcionNueva(parametro: any): void {",
    "// El adaptador tiene una función para ejecutar.", 
    "this.gateway.funcionVieja(parametro); ",
  "}",
"}"
	]
  }
}
